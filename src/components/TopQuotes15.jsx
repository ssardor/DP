import React, { useState, useEffect } from "react";
import styles from "../styles/TopQuotes.module.css";
import iconCopy from "../img/IconCopy.svg";
import iconShare from "../img/IconShare.svg";
const initialQuotes = [
  {
    text: "–ë—É–¥—å —Å–æ–±–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.",
    author: "–û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
    likes: 1400,
    shares: 230,
    liked: false,
  },
  {
    text: "–ò–Ω–æ–≥–¥–∞ –º–æ–ª—á–∞–Ω–∏–µ ‚Äî —Å–∞–º—ã–π –≥—Ä–æ–º–∫–∏–π –∫—Ä–∏–∫.",
    author: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä",
    likes: 2300,
    shares: 500,
    liked: false,
  },
  {
    text: "–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –ø—É—Ç—å, –∞ –Ω–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
    author: "–ë—É–¥–¥–∞",
    likes: 1800,
    shares: 320,
    liked: false,
  },
  {
    text: "–¢–æ—Ç, –∫—Ç–æ —Ö–æ—á–µ—Ç ‚Äî –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç ‚Äî –∏—â–µ—Ç –ø—Ä–∏—á–∏–Ω—ã.",
    author: "–°–æ–∫—Ä–∞—Ç",
    likes: 2100,
    shares: 410,
    liked: false,
  },
  {
    text: "–ú–µ—á—Ç–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ –±—É–¥–µ—à—å –∂–∏—Ç—å –≤–µ—á–Ω–æ. –ñ–∏–≤–∏ —Ç–∞–∫, –±—É–¥—Ç–æ —É–º—Ä—ë—à—å —Å–µ–≥–æ–¥–Ω—è.",
    author: "–î–∂–µ–π–º—Å –î–∏–Ω",
    likes: 1950,
    shares: 380,
    liked: false,
  },
  {
    text: "–ù–µ –æ—à–∏–±–∞–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç.",
    author: "–¢–µ–æ–¥–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
    likes: 1700,
    shares: 290,
    liked: false,
  },
  {
    text: "–°–¥–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –Ω–µ —Ö–æ—Ç—è—Ç, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—à—å –∂–∏—Ç—å —Ç–∞–∫, –∫–∞–∫ –¥—Ä—É–≥–∏–µ –Ω–µ –º–æ–≥—É—Ç.",
    author: "–î–∂–µ—Ä—Ä–∏ –†–∞–π—Å",
    likes: 1600,
    shares: 270,
    liked: false,
  },
  {
    text: "–í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–æ–≥–æ.",
    author: "–õ–∞–æ-—Ü–∑—ã",
    likes: 1500,
    shares: 250,
    liked: false,
  },
  {
    text: "–õ—É—á—à–µ –∑–∞–∂–µ—á—å –æ–¥–Ω—É —Å–≤–µ—á—É, —á–µ–º –ø—Ä–æ–∫–ª–∏–Ω–∞—Ç—å —Ç–µ–º–Ω–æ—Ç—É.",
    author: "–ö–æ–Ω—Ñ—É—Ü–∏–π",
    likes: 1750,
    shares: 310,
    liked: false,
  },
  {
    text: "–°–∏–ª–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞—Ç—å, –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–∞–¥–∞–µ—à—å.",
    author: "–ù–µ–ª—å—Å–æ–Ω –ú–∞–Ω–¥–µ–ª–∞",
    likes: 2200,
    shares: 430,
    liked: false,
  },
  {
    text: "–¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–±—Å—É—Ä–¥–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, —Å–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ.",
    author: "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω",
    likes: 2000,
    shares: 390,
    liked: false,
  },
  {
    text: "–ù–µ –ø–æ–∑–≤–æ–ª—è–π –≤—á–µ—Ä–∞—à–Ω–µ–º—É –¥–Ω—é –∑–∞–Ω—è—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º.",
    author: "–£–∏–ª–ª –†–æ–¥–∂–µ—Ä—Å",
    likes: 1550,
    shares: 260,
    liked: false,
  },
  {
    text: "–í–µ—Ä—å –≤ —Å–µ–±—è, –∏ —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è.",
    author: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä",
    likes: 1450,
    shares: 240,
    liked: false,
  },
  {
    text: "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –¥–µ–ª–∞—é—Ç –Ω–∞—Å —Å–∏–ª—å–Ω–µ–µ.",
    author: "–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ",
    likes: 1650,
    shares: 280,
    liked: false,
  },
  {
    text: "–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å, ‚Äî —ç—Ç–æ –∂–∏—Ç—å –∂–∏–∑–Ω—å—é —Å–≤–æ–µ–π –º–µ—á—Ç—ã.",
    author: "–û–ø—Ä–∞ –£–∏–Ω—Ñ—Ä–∏",
    likes: 1850,
    shares: 330,
    liked: false,
  },
];

const TopQuotes15 = () => {
  const [quotes, setQuotes] = useState(initialQuotes);
  const [showToTop, setShowToTop] = useState(false);
  const [copiedIdx, setCopiedIdx] = useState(null);

  useEffect(() => {
    const onScroll = () => {
      setShowToTop(window.scrollY > 400);
    };
    window.addEventListener("scroll", onScroll);
    return () => window.removeEventListener("scroll", onScroll);
  }, []);

  const handleLike = (idx) => {
    setQuotes((prev) =>
      prev.map((q, i) =>
        i === idx
          ? {
              ...q,
              liked: !q.liked,
              likes: q.liked ? q.likes - 1 : q.likes + 1,
            }
          : q
      )
    );
  };

  const handleCopy = (text, author, idx) => {
    navigator.clipboard.writeText(`"${text}" ‚Äî ${author}`);
    setCopiedIdx(idx);
    setTimeout(() => setCopiedIdx(null), 1600);
  };

  const handleShare = (text, author) => {
    if (navigator.share) {
      navigator
        .share({
          title: "–¶–∏—Ç–∞—Ç–∞",
          text: `"${text}" ‚Äî ${author}`,
          url: window.location.href,
        })
        .catch(() => {});
    } else {
      alert("–§—É–Ω–∫—Ü–∏—è —à—ç—Ä–∏–Ω–≥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.");
    }
  };

  return (
    <div className={styles.topQuotesWrapper}>
      <header className={styles.header}>
        <h1 className={styles.title}> –¢–æ–ø 15 –¶–∏—Ç–∞—Ç</h1>
      </header>
      <div className={styles.quotesList}>
        {quotes.map((q, idx) => (
          <div className={styles.quoteCard} key={idx}>
            <div className={styles.quoteText}>"{q.text}"</div>
            <div className={styles.quoteAuthor}>‚Äî {q.author}</div>
            <div className={styles.divider} />
            <div className={styles.metrics}>
              <span className={styles.metric}>
                <span
                  className={`${styles.heart} ${q.liked ? styles.liked : ""}`}
                  onClick={() => handleLike(idx)}
                  title={q.liked ? "–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
                >
                  {q.liked ? "‚ù§Ô∏è" : "ü§ç"}
                </span>
                {q.likes.toLocaleString("ru-RU")}
              </span>
              <span className={styles.metric}>
                <img src={iconShare} alt="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" />
                {q.shares.toLocaleString("ru-RU")}
              </span>
            </div>
            <div className={styles.actions}>
              <button
                className={styles.actionBtn}
                onClick={() => handleLike(idx)}
                aria-label="–õ–∞–π–∫"
              >
                {q.liked ? "‚ù§Ô∏è" : "ü§ç"}
              </button>
              <div style={{ position: "relative" }}>
                <button
                  className={styles.actionBtn}
                  onClick={() => handleCopy(q.text, q.author, idx)}
                  aria-label="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
                >
                  <img src={iconCopy} alt="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å" />
                </button>
                {copiedIdx === idx && (
                  <div className={styles.popover}>–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</div>
                )}
              </div>
              <button
                className={styles.actionBtn}
                onClick={() => handleShare(q.text, q.author)}
                aria-label="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
              >
                <img src={iconShare} alt="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" />
              </button>
            </div>
          </div>
        ))}
      </div>
      <div className={styles.cta}>
        –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é!
      </div>
      <button
        className={`${styles.toTopBtn} ${showToTop ? styles.show : ""}`}
        onClick={() => window.scrollTo({ top: 0, behavior: "smooth" })}
        aria-label="–ù–∞–≤–µ—Ä—Ö"
      >
        ‚Üë
      </button>
    </div>
  );
};

export default TopQuotes15;
